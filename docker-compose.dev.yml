# version: '3.8'
name: isearch_app

services:
  db_init:
    # env_file:
    #   - path: ./db_init/db.env
    #     required: true
    environment:
      - SQL_CERTIF_PATH=${SQL_CERTIF_PATH}
      - CLIENT_CERTIF_PATH=${CLIENT_CERTIF_PATH}
      - MADIADB_CONF_FILES=${MADIADB_CONF_FILES}
      - MARIADB_LOG_USER_FILE=/run/secrets/mariadb_log_user
      - MARIADB_LOG_PWD_FILE=/run/secrets/mariadb_log_pwd
      - MARIADB_FOR_LOGS=${MARIADB_FOR_LOGS}
      # - MONGODB_CERTIF_PATH=${MONGODB_CERTIF_PATH}
      # - MONGODB_CONF_FILE=${MONGODB_CONF_FILE}
    build:
      dockerfile: ${DBINIT_VM_FILE}
      args:
        VM_IMG: ${DBINIT_VM_IMG}
        VM_ENTRYPNT: ${DBINIT_VM_ENTRYPOIT_PATH}
    secrets:
      - mariadb_log_user
      - mariadb_log_pwd
    volumes:
      - mariadb_serv_certifs:${SQL_CERTIF_PATH}:z
      - mariadb_client_certifs:${CLIENT_CERTIF_PATH}:z
      - type: volume
        source: mariadb_conf
        target: ${MADIADB_CONF_FILES}
      - type: volume
        source: mariadb_init
        target: /mariadb_init
      # - type: volume
      #   source: mongodb_conf
      #   target: ${MONGODB_CONF_FILE}
      # - ./mongodb_init/create_user.sh:/mongodb/create_user.sh:z
      # - ./certifs/mongodb:${MONGODB_CERTIF_PATH}:z
      # - type: volume
      #   source: mongodb_init
      #   target: /mongodb/init
    
  mariadb:
    image : mariadb:11.3
    environment:
      - MARIADB_ROOT_PASSWORD_FILE=/run/secrets/mariadb_root_pwd
      - MARIADB_PASSWORD_FILE=/run/secrets/mariadb_mysql_pwd
      - MARIADB_LOG_USER_FILE=/run/secrets/mariadb_log_user
      - MARIADB_LOG_PWD_FILE=/run/secrets/mariadb_log_pwd
      - MARIADB_FOR_LOGS=${MARIADB_FOR_LOGS}
    env_file: 
      - path: ./boot/db_init/db.env
        required: true
    secrets:
      - mariadb_root_pwd
      - mariadb_mysql_pwd
    depends_on:
      db_init:
        condition: service_completed_successfully
    restart: always
    ports:
      - 3306:3306
    volumes:
      - type: volume
        source: mariadb_data
        target: /var/lib/mysql
      - type: volume
        source: mariadb_conf
        target: /etc/mysql/mariadb.conf.d
        # read_only: true
      - type: volume
        source: mariadb_serv_certifs
        target: /etc/mysql/ssl
        read_only: true
      - type: volume
        source: mariadb_init
        target: /docker-entrypoint-initdb.d
        read_only: true
    networks:
      - sql-network
    healthcheck:
      interval: 30s
      retries: 3
      test:
        [
          "CMD",
          "healthcheck.sh",
          "--su-mysql",
          "--connect",
          "--innodb_initialized"
        ]
      timeout: 30s
  
  es-setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - type: volume
        source: certifs_es
        target: /usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - es-network\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - es-network

  es01:
    depends_on:
      es-setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - type: volume
        source: certifs_es
        target: /usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      #- ELASTIC_PASSWORD_FILE=/run/secrets/elasticsearch_pwd
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://es-network:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - es-network

  redis:
    image: redis:latest
    restart: on-failure
    # expose:
    #   - "${REDIS_PORT}"
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    command: redis-server --port "${REDIS_PORT}"
    networks:
      - worker-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
  
  api:
    build:
      dockerfile: "${API_VM_FILE}"
      args:
        VM_BASE: "${API_VM_BASE}"
        VM_USER: "${API_VM_USER}"
        VM_HOME: "${API_VM_HOME}"
        VM_CODE: "${API_VM_CODE}"
        VM_HOST_PIP: "${API_HOST_PIP}"
        PROJ_INIT_FOLD: "${API_PROJ_BASE}"
    # command: /bin/sh ./entrypoint.sh
    container_name: api
    secrets:
      - secret_api
      - mariadb_mysql_pwd
      - mariadb_log_user
      - mariadb_log_pwd
      - api_admin_username
      - api_admin_pwd
    env_file: 
      - path: ./boot/db_init/db.env
        required: true
    volumes:
      - type: volume
        source: mariadb_client_certifs
        target: ${SQL_CERTIF_PATH}
        read_only: true
      - certifs_es:${ES_VM_CERTIF_PATH}
      - ./search_app:${API_VM_CODE}/search_app ### DEV
    environment:
      - API_PROJECT_ENTRYPOINT=${API_VM_PROJECT_APP}
      - API_VM_PROJECT_APP=${API_VM_PROJECT_APP}
      - API_SCOPES=${API_SCOPES}
      - API_ENDPOINT=${API_ENDPOINT}
      - SECRET_KEY=/run/secrets/secret_api
      - API_ADMIN_USERNAME=/run/secrets/api_admin_username
      - API_ADMIN_PWD=/run/secrets/api_admin_pwd
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - CLIENT_CERTIF_PATH=${SQL_CERTIF_PATH}
      - MARIADB_PASSWORD_FILE=/run/secrets/mariadb_mysql_pwd
      - MARIADB_LOG_USER_FILE=/run/secrets/mariadb_log_user
      - MARIADB_LOG_PWD_FILE=/run/secrets/mariadb_log_pwd
      - MARIADB_FOR_LOGS=${MARIADB_FOR_LOGS}
      - CELERY_BROKER_TRANSPORT_URL="${CELERY_BROKER_URL}"
      - CELERY_RESULT_TRANSPORT_BACKEND="${CELERY_RESULT_BACKEND}"
      - ES_VM_CERTIF_PATH=${ES_VM_CERTIF_PATH}
    depends_on:
      db_init:
        condition: service_completed_successfully
      mariadb:
        condition: service_healthy
      es-setup:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      worker:
        condition: service_healthy
    networks:
      - worker-network
      - es-network
      - sql-network
      - monitoring-network
    ports:
      - 8000:8000

  worker:
    build:
      dockerfile: "./boot/worker_init/Dockerfile"
      args:
        VM_BASE: "${WORKER_VM_BASE}"
        VM_USER: "${WORKER_VM_USER}"
        VM_HOME: "${WORKER_VM_HOME}"
        VM_CODE: "${WORKER_VM_CODE}"
        PROJ_INIT_FOLD: "${WORKER_PROJ_BASE}"
      tags:
        - "celery_worker:latest"
    image: celery_worker:latest
    # command: /bin/sh ./entrypoint.sh
  #   restart: always
    oom_kill_disable: true
    secrets:
      - mariadb_mysql_pwd
      - mariadb_log_user
      - mariadb_log_pwd
    env_file: 
      - path: ./boot/db_init/db.env
        required: true
    volumes:
      - pdf_files:${PDF_FILES_PATH}
      - type: volume
        source: mariadb_client_certifs
        target: ${SQL_CERTIF_PATH}
        read_only: true
      - certifs_es:${ES_VM_CERTIF_PATH}
      - ./search_app:${WORKER_VM_CODE}/search_app
    environment:
      - PDF_FILES_PATH=${PDF_FILES_PATH}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - CLIENT_CERTIF_PATH=${SQL_CERTIF_PATH}
      - MARIADB_PASSWORD_FILE=/run/secrets/mariadb_mysql_pwd
      - MARIADB_LOG_USER_FILE=/run/secrets/mariadb_log_user
      - MARIADB_LOG_PWD_FILE=/run/secrets/mariadb_log_pwd
      - MARIADB_FOR_LOGS=${MARIADB_FOR_LOGS}
      - CELERY_BROKER_TRANSPORT_URL="${CELERY_BROKER_URL}"
      - CELERY_RESULT_TRANSPORT_BACKEND="${CELERY_RESULT_BACKEND}"
      - ES_VM_CERTIF_PATH=${ES_VM_CERTIF_PATH}
      - HEADER_API_KEY=${HEADER_API_KEY}
      - SCRAPPED_PDF_FOLDER=${SCRAPPED_PDF_FOLDER}
    networks:
      - worker-network
      - es-network
      - sql-network
    healthcheck:
      test: ["CMD-SHELL", "celery", "-A", "search_app.celery_worker", "inspect",  "ping"]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      db_init:
        condition: service_completed_successfully
      mariadb:
        condition: service_healthy
      es-setup:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      
  # worker_0:
  #   extends:
  #     service: worker
  
  # worker_1:
  #   extends:
  #     service: worker

  flower:
    image: "${FLOW_VM_IMG_NAME}"
    command: ['celery', '--broker=redis://redis:6379/0', 'flower', '--port=5555']
    container_name: flower
    volumes:
      - flower_data:/data
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - worker-network
      - monitoring-network
    ports: 
      - 5555:5555
  
  prometheus:
    build:
      dockerfile: "${PROM_DOCKERFILE}"
      args:
        VM_IMG_NAME: "${PROM_VM_IMG_NAME}"
        HOST_YML_PATH: "${PROM_HOST_YML_PATH}"
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    # expose: 9090
    networks:
      - monitoring-network

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - monitoring-network



  # mongodb:
  #   image: mongo:7.0.7
  #   depends_on:
  #     db_init:
  #       condition: service_completed_successfully
  #   command: --config /etc/mongo/mongod.conf
  #   environment:
  #     - MONGO_INITDB_ROOT_USERNAME_FILE=/run/secrets/mongodb_root_name
  #     - MONGO_INITDB_ROOT_PASSWORD_FILE=/run/secrets/mongodb_root_pwd
  #     - MONGO_INITDB_USER_USERNAME_FILE=/run/secrets/mongodb_user_name
  #     - MONGO_INITDB_USER_PASSWORD_FILE=/run/secrets/mongodb_user_pwd
  #     - MONGO_DB_NAME=${MONGO_DB_NAME}
  #   secrets:
  #     - mongodb_root_name
  #     - mongodb_user_name
  #     - mongodb_root_pwd
  #     - mongodb_user_pwd
  #   volumes:
  #     - mongodb_data:/data/db:z
  #     - type: volume
  #       source: mongodb_conf
  #       target: /etc/mongo
  #       # read_only: true
  #     - type: volume
  #       source: mongodb_init
  #       target: /docker-entrypoint-initdb.d
  #     - ./certifs/mongodb/server:/home/mongodb/ssl:z
  #   ports:
  #     - 27017:27017
  #   networks:
  #     - nosql-network
    

volumes:
  # mariadb_cert:
  #   driver: local
  mariadb_conf:
    driver: local
  mariadb_data:
    driver: local
  mariadb_init:
    driver: local
  mariadb_serv_certifs:
    driver: local
    driver_opts:
      device: ${PWD}${SERV_HOST_CERTIF_PATH}
      o: bind
      type: local
  mariadb_client_certifs:
    driver: local
    driver_opts:
      device: ${PWD}${CLIENT_HOST_CERTIF_PATH}
      o: bind
      type: local
  pdf_files:
    driver: local
    driver_opts:
      device: ${PWD}${PDF_FILES_PATH_HOST}
      o: bind
      type: local
  # client_ssl_cert:
  #   driver: local
  # es_certs:
  #   driver: local
  # mongodb_data:
  #   driver: local
  # mongodb_init:
  #   driver: local
  # mongodb_conf:
  #   driver: local
  # mongodb_ssl_cert:
  #   driver: local
  certifs_es:
    driver: local
    driver_opts:
      device: "${PWD}${ES_HOST_CERTIFS_PATH}"
      o: bind
      type: local
  esdata01:
    driver: local
  grafana_data:
    driver: local
    driver_opts:
      o: bind
      type: local
      device: ./grafana_data
  flower_data:
    driver: local
    driver_opts:
      o: bind
      type: local
      device: ./flower_data



secrets:
  mariadb_root_pwd:
    file: './boot/db_init/mariadb_root_pwd.txt'
  mariadb_mysql_pwd:
    file: './boot/db_init/mariadb_mysql_pwd.txt'
  mariadb_log_user:
    file: './boot/db_init/mariadb_log_user_name'
  mariadb_log_pwd:
    file:  './boot/db_init/mariadb_log_user_pwd'
  secret_api:
    file: './certifs/api/secure_secret.txt'
  api_admin_username:
    file: './certifs/api/admin_user_name'
  api_admin_pwd:
    file: './certifs/api/admin_user_pwd'
  # mongodb_root_name:
  #   file: ./mongodb_init/mongodb_root_name
  # mongodb_user_name:
  #   file: ./mongodb_init/mongodb_user_name
  # mongodb_root_pwd:
  #   file: ./mongodb_init/mongodb_root_pwd
  # mongodb_user_pwd:
  #   file: ./mongodb_init/mongodb_user_pwd
  # elasticsearch_pwd:
  #   file: './es_files/elasticsearch_pwd.txt'

networks:
  sql-network:
    driver: bridge
    ipam:
      config:
        - subnet: 10.3.0.0/16
          gateway: 10.3.0.1
          aux_addresses:
            mariadb: 10.3.0.3
  es-network:
    driver: bridge
    ipam:
      config:
        - subnet: 10.4.0.0/16
          gateway: 10.4.0.1
  worker-network:
    driver: bridge
    ipam:
      config:
        - subnet: 10.2.0.0/16
          gateway: 10.2.0.1
  monitoring-network:
    driver: bridge
    ipam:
      config:
        - subnet: 10.5.0.0/16
          gateway: 10.5.0.1
  # nosql-network:
  #   driver: bridge
  #   ipam:
  #     config:
  #       - subnet: 10.5.0.0/16
  #         gateway: 10.5.0.1
  #         aux_addresses:
  #           mongodb: 10.5.0.3